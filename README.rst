setuptools_scm
===============

This module is a simple setup_requires utility for use
in mercurial and git based projects.

It extracts the last Tag as well as the distance to it in commits
from the scm, and uses these to calculate a version number.

And it provides a file finder for both scm, so MANIFEST.in is no longer needed.

By default, it will increment the last component of the version by one
and append .dev{distance}
in case the last component is .dev, the version will be unchanges

This requires always using all components in tags (i.e. 2.0.0 instead of 2.0)
to avoid counting up at the wrong level
and inadvertedly releasing a higher version
(i.e. 2.1.devX instead of 2.0.1.devX)


It uses various strategies to archive its task:

1. try to directly ask hg/git for the tag/distance
2. try to infer it from the `.hg_archival.txt` file
3. try to read the exact version from the 'PKG-INFO' file
   as generated by `setup.py sdists` (this is a nasty abuse)


The setup.py usage is::

    from setuptools import setup
    setup(
        ...,
        use_scm_version=True,
        setup_requires=['setuptools_scm'],
        ...,
    )

If you want to configure the way use_scm_version works
you an provide a mapping with options instead of simple truth value.


currently supported configuration keys are:

:version_scheme:
    configures how the local version number is constructed
    either a entrypoint name or a callable
:local_scheme:
    configures how the local component of the version is constructed
    either a entrypoint name or a callable

To use setuptools_scm in other python code
one can use the get_version function::

    from setuptools_scm import get_version
    my_version = get_version()

It suports the keys of the setup.py use_scm_version
flag as keyword arguments.


extending setuptools_scm
------------------------

adding new scm
~~~~~~~~~~~~~~

setuptools_scm provides 2 entrypoints for adding new scms

:setuptools_scm.parse_scm:
    a function used to parse the metadata of the current workdir
    use the name of the control directoy/file of your scm as name

    the return value should be a mapping created by the
    function setuptools_scm.version:meta

:setuptools_scm.files_command:
    either a string containing a shell command that prints all scm managed files in its current working directory
    or a callable, that given a pathname will return

    also use then name of your scm control directory as name of the entrypoint


version number constructions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:setuptools_scm.version_scheme:
    configures how the version number is constructed

    availiable implementations:
    :guess-next-dev: automatically guess the next development version
    :post-release: generate post release versions

:setuptools_scm.local_scheme:
    configures how the local part of a version is rendered

    availiable implementations:
    :node-and-date: adds the node on dev versions and the date on dirty wokdir
    :dirty-tag: adds +dirty if the current workdir has changes
